<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/batch"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/batch
           http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
           http://www.springframework.org/schema/context 
           http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<context:property-placeholder location="classpath*:application.properties" />

	<job id="xmlJob">
		<step id="xmlStep">
			<tasklet>
				<chunk reader="xmlItemReader" processor="customerStatementProcessor"
					writer="csvFileItemWriter" commit-interval="1" />
			</tasklet>
		</step>
	</job>

	<job id="csvJob">
		<step id="csvStep">
			<tasklet>
				<chunk reader="csvItemReader" processor="customerStatementProcessor"
					writer="csvFileItemWriter" commit-interval="1" />
			</tasklet>
		</step>
	</job>

	<beans:bean id="xmlItemReader" class="org.springframework.batch.item.xml.StaxEventItemReader">
		<beans:property name="fragmentRootElementName" value="record" />
		<beans:property name="resource" value="${customer.statement.xml.file.input}" />
		<beans:property name="unmarshaller" ref="reportUnmarshaller" />
	</beans:bean>

	<beans:bean id="csvItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
		<beans:property name="linesToSkip" value="1" /> 
		<beans:property name="resource" value="${customer.statement.csv.file.input}" />
		<beans:property name="lineMapper">
		
			<beans:bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">

				<beans:property name="lineTokenizer">
					<beans:bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<beans:property name="names"
							value="Reference,Account Number,Description,Start Balance,Mutation,End Balance" />
					</beans:bean>
				</beans:property>
				<beans:property name="fieldSetMapper">
					<beans:bean class="com.customer.statement.model.CustomerStatementMapper" />
			    </beans:property> 
			</beans:bean>
			
		</beans:property>


	</beans:bean>

	<!-- Read and map values to object, via jaxb2 -->
	<beans:bean id="reportUnmarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
		<beans:property name="classesToBeBound">
			<beans:list>
				<beans:value>com.customer.statement.model.CustomerStatement</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>


	<beans:bean id="customerStatementProcessor"
		class="com.customer.statement.processor.CustomerStatementProcessor"  scope="prototype"/>

	<beans:bean id="csvFileItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">
		<beans:property name="resource">
			<beans:bean id="outputFile" class="org.springframework.core.io.FileSystemResource">
			  <beans:constructor-arg value="${customer.statement.file.output}/output.#{ T(java.util.UUID).randomUUID() }.csv" />
			</beans:bean>
		</beans:property>
		
		<beans:property name="shouldDeleteIfExists" value="true" />

		<beans:property name="lineAggregator">
			<beans:bean
				class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
				<beans:property name="delimiter" value="," />
				<beans:property name="fieldExtractor">
					<beans:bean
						class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
						<beans:property name="names" value="reference, accountNumber, failedReason" />
					</beans:bean>
				</beans:property>
			</beans:bean>
		</beans:property>
	</beans:bean>

</beans:beans>